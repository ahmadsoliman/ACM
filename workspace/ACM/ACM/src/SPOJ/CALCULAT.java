package SPOJ;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.StringTokenizer;
public class CALCULAT {
	static final String ans[]={};
	static String ans2[];
	
	public static void main(String[] args) throws NumberFormatException,
			IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		
		String empty="";
		BigInteger fib = new BigInteger("1"), mod=(new BigInteger("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
		ans2 = new String[405]; ans2[0] = "1"; ans2[1] = "1";
		for (int i = 2; i < 405; i++) {
			fib = fib.multiply(new BigInteger(empty+i));
			fib = fib.mod(mod);
			ans2[i]=fib.toString();
		}
		for(int i=0; i<405; i++) System.out.print("\'"+ans2[i]+"\',");
		String zeros = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
		
		BigDecimal pi = new BigDecimal("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482"), two = new BigDecimal(
				"2"), ln10 = ln(new BigDecimal(10), 23), log2pi = ln(pi.multiply(two), 23), loge, nd, d, upper, four=new BigDecimal("4"), one = new BigDecimal("1"), three = new BigDecimal("3"), oneeighteenth = new BigDecimal("18"), two405 = two.divide(new BigDecimal("405"), 23,RoundingMode.HALF_UP), thirtyone972 = (new BigDecimal("31")).divide(new BigDecimal("9720"), 23, RoundingMode.HALF_UP);
		oneeighteenth = one.divide(oneeighteenth, 23, RoundingMode.HALF_UP);
		log2pi = log2pi.divide(ln10.multiply(two), 23, RoundingMode.HALF_UP);
		loge = one.divide(ln10, 23, RoundingMode.HALF_UP);

		double fact;
		int n, k, l;
		StringTokenizer st;
		for (int i = 0; i < t; i++) {
			st = new StringTokenizer(br.readLine());
			if(!st.hasMoreTokens()) { i--; continue; }
			n = Integer.parseInt(st.nextToken());
			k = Integer.parseInt(st.nextToken());
			l = Integer.parseInt(st.nextToken());

			if (n >= 1001) {
				nd = new BigDecimal("" + n);
				upper = nd.multiply(nd).add(nd.divide(three, 23, RoundingMode.HALF_UP)).add(oneeighteenth).subtract(two405.divide(nd, 23, RoundingMode.HALF_UP)).subtract(thirtyone972.divide(nd.multiply(nd), 23,RoundingMode.HALF_UP));
				upper = ln(upper, 23).divide(ln10, 23, RoundingMode.HALF_UP).divide(four);
				d = log2pi.add(nd.multiply(ln(nd, 23).divide(ln10, 23,RoundingMode.HALF_UP).subtract(loge))).add(upper);
				d = d.subtract(new BigDecimal(d.toBigInteger()));
				fact = Math.pow(10, d.doubleValue());
				System.out.println(("" + fact).substring(0, k + 1).replace(".","") + " " + zeros.substring(0, l));
			} else 
				System.out.println(ans[n].substring(0, k) + " " + ((n<405)?ans2[n].substring(ans2[n].length() - l):zeros.substring(0, l)));
		}
	}
	public static BigDecimal ln(BigDecimal x, int scale) {
		if (x.signum() <= 0) throw new IllegalArgumentException("x <= 0");
		int magnitude = x.toString().length() - x.scale() - 1;
		if (magnitude < 3) return lnNewton(x, scale);
		else {
			BigDecimal root = intRoot(x, magnitude, scale);
			BigDecimal lnRoot = lnNewton(root, scale);
			return BigDecimal.valueOf(magnitude).multiply(lnRoot)
					.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
		}}
	private static BigDecimal lnNewton(BigDecimal x, int scale) {
		int sp1 = scale + 1;
		BigDecimal n = x;
		BigDecimal term;
		BigDecimal tolerance = BigDecimal.valueOf(5).movePointLeft(sp1);
		do {
			BigDecimal eToX = exp(x, sp1);
			term = eToX.subtract(n).divide(eToX, sp1, BigDecimal.ROUND_DOWN);
			x = x.subtract(term);
			Thread.yield();
		} while (term.compareTo(tolerance) > 0);
		return x.setScale(scale, BigDecimal.ROUND_HALF_EVEN);}
	public static BigDecimal intRoot(BigDecimal x, int index, int scale) {
		if (x.signum() < 0) throw new IllegalArgumentException("x < 0");
		int sp1 = scale + 1;
		BigDecimal n = x;
		BigDecimal i = BigDecimal.valueOf(index);
		BigDecimal im1 = BigDecimal.valueOf(index - 1);
		BigDecimal tolerance = BigDecimal.valueOf(5).movePointLeft(sp1);
		BigDecimal xPrev;
		x = x.divide(i, scale, BigDecimal.ROUND_HALF_EVEN);
		do {
			BigDecimal xToIm1 = x.pow(index - 1);
			BigDecimal xToI = x.multiply(xToIm1).setScale(sp1,
					BigDecimal.ROUND_HALF_EVEN);
			BigDecimal numerator = n.add(im1.multiply(xToI)).setScale(sp1,
					BigDecimal.ROUND_HALF_EVEN);
			BigDecimal denominator = i.multiply(xToIm1).setScale(sp1,
					BigDecimal.ROUND_HALF_EVEN);
			xPrev = x;
			x = numerator.divide(denominator, sp1, BigDecimal.ROUND_DOWN);
			Thread.yield();
		} while (x.subtract(xPrev).abs().compareTo(tolerance) > 0);
		return x;}
	public static BigDecimal exp(BigDecimal x, int scale) {
		if (x.signum() == 0) {
			return BigDecimal.valueOf(1);
		} else if (x.signum() == -1) {
			return BigDecimal.valueOf(1).divide(exp(x.negate(), scale), scale,
					BigDecimal.ROUND_HALF_EVEN);
		}
		BigDecimal xWhole = x.setScale(0, BigDecimal.ROUND_DOWN);
		if (xWhole.signum() == 0)
			return expTaylor(x, scale);
		BigDecimal xFraction = x.subtract(xWhole);
		BigDecimal z = BigDecimal.valueOf(1).add(
				xFraction.divide(xWhole, scale, BigDecimal.ROUND_HALF_EVEN));
		BigDecimal t = expTaylor(z, scale);

		BigDecimal maxLong = BigDecimal.valueOf(Long.MAX_VALUE);
		BigDecimal result = BigDecimal.valueOf(1);
		while (xWhole.compareTo(maxLong) >= 0) {
			result = result.multiply(intPower(t, Long.MAX_VALUE, scale))
					.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
			xWhole = xWhole.subtract(maxLong);

			Thread.yield();
		}
		return result.multiply(intPower(t, xWhole.longValue(), scale))
				.setScale(scale, BigDecimal.ROUND_HALF_EVEN);}
	private static BigDecimal expTaylor(BigDecimal x, int scale) {
		BigDecimal factorial = BigDecimal.valueOf(1);
		BigDecimal xPower = x;
		BigDecimal sumPrev;
		BigDecimal sum = x.add(BigDecimal.valueOf(1));
		int i = 2;
		do {
			xPower = xPower.multiply(x).setScale(scale,
					BigDecimal.ROUND_HALF_EVEN);
			factorial = factorial.multiply(BigDecimal.valueOf(i));
			BigDecimal term = xPower.divide(factorial, scale,
					BigDecimal.ROUND_HALF_EVEN);
			sumPrev = sum;
			sum = sum.add(term);
			++i;
			Thread.yield();
		} while (sum.compareTo(sumPrev) != 0);
		return sum;}
	public static BigDecimal intPower(BigDecimal x, long exponent, int scale) {
		if (exponent < 0) return BigDecimal.valueOf(1).divide(intPower(x, -exponent, scale),scale, BigDecimal.ROUND_HALF_EVEN);
		BigDecimal power = BigDecimal.valueOf(1);
		while (exponent > 0) {
			if ((exponent & 1) == 1) power = power.multiply(x).setScale(scale,BigDecimal.ROUND_HALF_EVEN);
			x = x.multiply(x).setScale(scale, BigDecimal.ROUND_HALF_EVEN);
			exponent >>= 1;
			Thread.yield();
		}
		return power;}
}
