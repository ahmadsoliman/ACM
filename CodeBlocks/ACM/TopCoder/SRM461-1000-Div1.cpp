#include <vector>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef unsigned long long ll;

class FencingGarden {
public:
	vector<ll> set1;
	vector<ll>::iterator it;

	long long computeWidth(vector <int> segment) {
        vector<ll> segs(segment.size());
        for(int i=0; i<segment.size(); i++) segs[i]=(ll)segment[i];

		int halfs=(segs.size()+1)/2, rests=segs.size()-halfs;

		ll sum=0, cursum;

		for(int i=0; i<segs.size(); i++) segs[i]<<=2, sum+=segs[i];
		ll optimalP=sum>>1;
        ll optimalS=sum>>2;

		for(int i=0; i<(1<<halfs); i++){
			cursum=0;
			for(int j=0; j<halfs; j++){
				if(i&(1<<j)) cursum+=segs[j];
			}
			set1.push_back(cursum);
		}

		sort(set1.begin(), set1.end());

		ll maxArea=0, curArea;
		ll maxP=0, curP, curS;

        if(segs.size()==2){
            sort(segs.begin(), segs.end());
            curArea = segs[1]*(segs[0]>>1);
            if(curArea>maxArea){
                maxArea=curArea;
                maxP=segs[1];
            }
            curArea = (segs[1]-segs[0])*(segs[0]);
            if(curArea>maxArea){
                maxArea=curArea;
                maxP=segs[1]-segs[0];
            }else if(curArea==maxArea){
                maxP=segs[1]-segs[0];
            }
            return maxP>>2;
        }

		ll mindiff=400000000000000000ll, mindiffS=400000000000000000ll, curdiff;

		for(int i=0; i<(1<<rests); i++){
			cursum=0;
			for(int j=0; j<rests; j++){
				if(i&(1<<j)) cursum+=segs[halfs+j];
			}

			ll left=optimalP-cursum, leftS=optimalS-cursum;
			it = lower_bound(set1.begin(), set1.end(), left);
            if(it==set1.end()) it--;

			curP=cursum+*it;

			curdiff=abs(curP-optimalP);

			if(curdiff<=mindiff){
				mindiff=curdiff;
				curArea=curP*((sum-curP)/2);

				if(curArea>maxArea){
					maxArea=curArea;
					maxP=curP;
				}else if(curArea==maxArea){
					if(curP>maxP) maxP=curP;
				}
			}
/*
			it = upper_bound(set1.begin(), set1.end(), left);
			if(it==set1.end()) it--;

			curP=cursum+*it;
			curdiff=abs(curP-optimalP);
			if(curdiff<=mindiff){
				mindiff=curdiff;
				curArea=curP*((sum-curP)>>1);
				if(curArea>maxArea){
					maxArea=curArea;
					maxP=curP;
				}else if(curArea==maxArea){
					if(curP>maxP) maxP=curP;
				}
			}*/

			it = lower_bound(set1.begin(), set1.end(), leftS);
            if(it==set1.end()) it--;

			curS=cursum+*it;

			curdiff=abs(curS-optimalS);

			if(curdiff<=mindiffS){
				mindiffS=curdiff;
				curArea=curS*(sum-curS*2);

				if(curArea>maxArea){
					maxArea=curArea;
					maxP=sum-curS*2;
				}else if(curArea==maxArea){
					maxP=max(maxP, sum-curS*2);
				}
			}
/*
			it = upper_bound(set1.begin(), set1.end(), leftS);
			if(it==set1.end()) it--;

			curS=cursum+*it;
			curdiff=abs(curS-optimalS);
			if(curdiff<=mindiffS){
				mindiffS=curdiff;
                curArea=curS*(sum-(curS<<1));

				if(curArea>maxArea){
					maxArea=curArea;
					maxP=sum-curS*2;
				}else if(curArea==maxArea){
					maxP=max(maxP, sum-(curS<<1));
				}
			}*/
		}

		return (ll)(maxP>>2);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FencingGarden *obj;
	long long answer;
	obj = new FencingGarden();
	clock_t startTime = clock();
	answer = obj->computeWidth(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	long long p1;

	{
	// ----- test 0 -----
	int t0[] = {1,1,1,1,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {50,25,25};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {100000000, 34, 37, 3, 46, 36, 48, 27, 24, 7, 8, 6, 33, 19, 25, 40, 26, 22, 47, 47, 22, 10, 23, 33, 38, 39, 2, 39, 12, 21, 2, 16, 6, 35, 50, 31, 13, 43, 25, 8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 99998997ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
