#include <stdio.h>
#include <string.h>
#include <math.h>

typedef long long ll;

#define MOD 1234567891

long long powmod(long long a, long long b){
  long long result = 1;
  long long base = a;
  while (b){
    if (b & 1){
      result = result*base % MOD;
    }
    b >>= 1;
    base = base*base % MOD;
  }
  return result;
}

long long mod(long long n){
    n%=MOD;
    if(n<0) n+=MOD;
    return n;
}

long long inv(long long n){
    return powmod(mod(n), MOD-2);
}

ll nCk[350][350], negnCk[350][350];

void initnCk(){
    int i, j, mod1=mod(-1);
    for(i=0; i<325; i++) nCk[i][i]=1, negnCk[i][i]=mod1;
    for(i=0; i<325; i++) nCk[i][0]=1, negnCk[i][0]=mod1;
    for(i=1; i<325; i++){
        for(j=1; j<i; j++){
            nCk[i][j]=(nCk[i-1][j]+nCk[i-1][j-1]);
            if(nCk[i][j]>MOD) nCk[i][j]-=MOD;
            negnCk[i][j]=-1*nCk[i][j]+MOD;
        }
    }
}

ll barn[350]={1, 617283945, 1028806576, 0, 41152263, 0, 146972368, 0, 41152263, 0, 692106242, 0, 963686511, 0, 1028806577, 0, 1057855225, 0, 926699512, 0, 939019291, 0, 706751579, 0, 963599931, 0, 1030232093, 0, 524709711, 0, 531327220, 0, 756354157, 0, 1013823569, 0, 98104866, 0, 18495119, 0, 419345379, 0, 1152496541, 0, 145906104, 0, 803146388, 0, 1053050999, 0, 282146370, 0, 34995418, 0, 648409977, 0, 207480494, 0, 684533205, 0, 168747187, 0, 34114053, 0, 820842811, 0, 29997863, 0, 920838161, 0, 905402198, 0, 537146124, 0, 343440174, 0, 806143474, 0, 669026180, 0, 706515177, 0, 1118256149, 0, 971985807, 0, 1144218901, 0, 118435074, 0, 657659205, 0, 1149685792, 0, 576795622, 0, 819534085, 0, 220314582, 0, 63892200, 0, 773185702, 0, 118521589, 0, 778674699, 0, 709459851, 0, 508941217, 0, 545988910, 0, 489554230, 0, 1126898604, 0, 652029471, 0, 570133855, 0, 378663319, 0, 844018588, 0, 537169896, 0, 1157470945, 0, 572168971, 0, 144258622, 0, 314190686, 0, 836143579, 0, 692725420, 0, 710386023, 0, 287185927, 0, 661266318, 0, 719674900, 0, 324391683, 0, 789901210, 0, 8806326, 0, 882740457, 0, 739877584, 0, 815447057, 0, 10808743, 0, 167554498, 0, 736306868, 0, 403653693, 0, 987758427, 0, 88401463, 0, 809255504, 0, 805441354, 0, 654811885, 0, 154480957, 0, 354315009, 0, 922911434, 0, 375151265, 0, 1175088766, 0, 656523607, 0, 990874092, 0, 303653562, 0, 1060141027, 0, 853094496, 0, 1152960953, 0, 1118342514, 0, 995151987, 0, 394135022, 0, 890602421, 0, 609010036, 0, 316560252, 0, 105035087, 0, 782042752, 0, 30713829, 0, 609880303, 0, 376120620, 0, 300689120, 0, 631317686, 0, 631470204, 0, 532921098, 0, 635658800, 0, 64850401, 0, 697201777, 0, 1174614005, 0, 273432293, 0, 157348503, 0, 383757426, 0, 236148918, 0, 1128097307, 0, 795539596, 0, 60492502, 0, 11192030, 0, 1028435909, 0, 436087965, 0, 425910110, 0, 954968209, 0, 93199320, 0, 489734447, 0, 1100387343, 0, 791349618, 0, 1061829719, 0, 1163697586, 0, 626149872, 0, 842974208, 0, 1121236533, 0, 230076199, 0, 564534004, 0, 746252332, 0, 1072263473, 0, 1054129244, 0, 484839103, 0, 878208821, 0, 960871990, 0, 1181428112, 0, 1107716411, 0, 444358071, 0, 610993068, 0, 940057039, 0, 1181872696, 0, 998586930, 0, 327524888, 0, 651599808, 0, 505449666, 0, 153549647, 0, 886964895, 0, 1205486749, 0, 1134642090, 0, 1019673741};

void initBarnoulli(){
    int i,j;
    barn[0]=1;
    for(i=1; i<325; i++){
        barn[i]=0;
        for(j=0; j<i; j++) barn[i] = mod(barn[i]-barn[j]*nCk[i][j]%MOD * inv(i-j+1)%MOD);
    }
}

ll powN[350];

/*
1
123456789 321

883749421
*/
int main(){
    int t, k,k1,k2, i,j, k1i, k2i;

    initnCk();
    //initBarnoulli();
    ll n, res, intr;
    powN[0]=1;

    scanf("%d", &t);
    while(t--){
        scanf("%lld %d", &n, &k);

        for(i=1; i<k+3; i++) powN[i]=powN[i-1]*n%MOD;

        k1 = k+1, k2=k+2;
        res = intr = 0;
        for(i=0, k1i=k1, k2i=k2; i<k1; i+=2, k1i-=2, k2i-=2){
            res += nCk[k1][i]* powN[k1i] % MOD * barn[i] % MOD;
            if(res>MOD) res-=MOD;
            intr += nCk[k2][i] * powN[k2i] % MOD * barn[i] % MOD;
            if(intr>MOD) intr-=MOD;
        }
        for(i=1, k1i=k, k2i=k1; i<k1; i+=2, k1i-=2, k2i-=2){
            res += negnCk[k1][i] * powN[k1i] % MOD * barn[i] % MOD;
            if(res>MOD) res-=MOD;
            intr += negnCk[k2][i] * powN[k2i] % MOD * barn[i] % MOD;
            if(intr>MOD) intr-=MOD;
        }

        res = res*(n+1) %MOD * inv(k1) %MOD;
        intr += (((k1)&1)?negnCk[k2][k1]: nCk[k2][k1]) * n % MOD * barn[k1] % MOD;
        if(intr>MOD) intr-=MOD;

        intr = intr * inv(k2) % MOD;
        res = res-intr;
        if(res<0) res+=MOD;

        printf("%d\n", res);

    }
    return 0;
}
