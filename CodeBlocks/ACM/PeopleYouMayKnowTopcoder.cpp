#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;


typedef pair<int, int> ii;
typedef pair<int, ii> iii;
typedef pair<ii, ii> iiii;
typedef pair<double, int> di;
typedef vector<int> vi;
typedef vector<di> vdi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef vector<vii> vvii;

class PeopleYouMayKnow {
public:
    int n;
    int graph[1010][1010];
    int vis[1010], ps[1010];

    int maxFlow(){
        int flow=0, cnt=0, u,v, par;
        while(1){
            memset(vis, 0, sizeof vis);
            memset(ps, 0, sizeof ps);
            priority_queue<iii> q;
            q.push(iii(2000000000, ii(0,-1)));
            int maxflow=0;
            while(!q.empty()){
                iii p = q.top(); q.pop();
                u = p.second.first;
                par = p.second.second;
                if(vis[u]) continue;
                vis[u]=1;
                ps[u]=par;
                if(u==n-1){
                    maxflow=p.first;
                    break;
                }
                for(int i=0; i<n; i++){
                    if(graph[u][i]>0){
                        q.push(iii(min(p.first, graph[u][i]), ii(i, u)));
                    }
                }
            }
            if(maxflow==0) break;
            v = n-1;
            while(ps[v]!=-1){
                u = ps[v];
                graph[u][v]-=maxflow;
                graph[v][u]+=maxflow;
                v = u;
            }
            cnt++;
            flow+=maxflow;
        }
        return flow;
    }
    int g[100][100];
    int dfs(int node, int tar, int n){
        if(node==tar) return 1;
        if(vis[node]) return 0;
        vis[node]=1;
        for(int i=0; i<n; i++) if(g[node][i] && dfs(i, tar, n)) return 1;
        return 0;
    }
	int maximalScore(vector<string> friends, int person1, int person2) {
        for(int i=0; i<friends.size(); i++){
            for(int j=0; j<friends[i].size(); j++){
                if(friends[i][j]=='Y') g[i][j]=1;
            }
        }

        int cnt=0;
        for(int i=0; i<friends.size(); i++){
            if(g[person1][i] && g[i][person2]){
                for(int j=0; j<friends.size(); j++) g[i][j]=g[j][i]=0;
                cnt++;
            }
        }
        if(!dfs(person1, person2, friends.size())) return cnt;

        int ap1=0, ap2=0;
        for(int i=0; i<friends.size(); i++) if(g[person1][i]) ap1++;
        for(int i=0; i<friends.size(); i++) if(g[person2][i]) ap2++;

        n = 2 + ap1 + ap2;
        for(int i=0, k=0, l=0; i<friends.size(); i++) {
            if(g[person1][i]) {
                graph[0][1+k]=1;
                for(int j=0, l2=0; j<friends.size(); j++){
                    if(g[person2][j]) {
                    	if(g[i][j]) graph[1+k][1+ap1+l2]=1;
                    	l2++;
                    }
                }
                k++;
            }
            if(g[person2][i]) graph[1+ap1+l++][n-1]=1;
        }
        return cnt + maxFlow();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	PeopleYouMayKnow *obj;
	int answer;
	obj = new PeopleYouMayKnow();
	clock_t startTime = clock();
	answer = obj->maximalScore(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	int p2;
	int p3;

	{
	// ----- test 0 -----
	string t0[] = {"NN","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	p3 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"NYNN","YNYN","NYNY","NNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"NYNYYYN","YNYNNYY","NYNNNNY","YNNNNNN","YNNNNYN","YYNNYNY","NYYNNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"NYYYYNNNN","YNNNNYYYN","YNNNNNNYN","YNNNNNNYN","YNNNNNNNY","NYNNNNNNY","NYNNNNNNY","NYYYNNNNY","NNNNYYYYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	p2 = 0;
	p3 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
